"""
This type stub file was generated by pyright.
"""

from typing import NamedTuple
from .util import *
from .exceptions import *
from .actions import *
from .core import __compat__, __diag__, _builtin_exprs as core_builtin_exprs
from .results import *
from .helpers import *
from .helpers import _builtin_exprs as helper_builtin_exprs
from .unicode import UnicodeRangeList, pyparsing_unicode as unicode, unicode_set
from .testing import pyparsing_test as testing
from .common import _builtin_exprs as common_builtin_exprs, pyparsing_common as common

__doc__ = ...
class version_info(NamedTuple):
    major: int
    minor: int
    micro: int
    releaselevel: str
    serial: int
    @property
    def __version__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


__version_info__ = ...
__version_time__ = ...
__version__ = ...
__versionTime__ = ...
__author__ = ...
if "pyparsing_unicode" not in globals():
    pyparsing_unicode = ...
if "pyparsing_common" not in globals():
    pyparsing_common = common
if "pyparsing_test" not in globals():
    pyparsing_test = testing
__all__ = ["__version__", "__version_time__", "__author__", "__compat__", "__diag__", "And", "AtLineStart", "AtStringStart", "CaselessKeyword", "CaselessLiteral", "CharsNotIn", "CloseMatch", "Combine", "DelimitedList", "Dict", "Each", "Empty", "FollowedBy", "Forward", "GoToColumn", "Group", "IndentedBlock", "Keyword", "LineEnd", "LineStart", "Literal", "Located", "PrecededBy", "MatchFirst", "NoMatch", "NotAny", "OneOrMore", "OnlyOnce", "OpAssoc", "Opt", "Optional", "Or", "ParseBaseException", "ParseElementEnhance", "ParseException", "ParseExpression", "ParseFatalException", "ParseResults", "ParseSyntaxException", "ParserElement", "PositionToken", "QuotedString", "RecursiveGrammarException", "Regex", "SkipTo", "StringEnd", "StringStart", "Suppress", "Token", "TokenConverter", "White", "Word", "WordEnd", "WordStart", "ZeroOrMore", "Char", "alphanums", "alphas", "alphas8bit", "any_close_tag", "any_open_tag", "autoname_elements", "c_style_comment", "col", "common_html_entity", "condition_as_parse_action", "counted_array", "cpp_style_comment", "dbl_quoted_string", "dbl_slash_comment", "delimited_list", "dict_of", "empty", "hexnums", "html_comment", "identchars", "identbodychars", "infix_notation", "java_style_comment", "line", "line_end", "line_start", "lineno", "make_html_tags", "make_xml_tags", "match_only_at_col", "match_previous_expr", "match_previous_literal", "nested_expr", "null_debug_action", "nums", "one_of", "original_text_for", "printables", "punc8bit", "pyparsing_common", "pyparsing_test", "pyparsing_unicode", "python_style_comment", "quoted_string", "remove_quotes", "replace_with", "replace_html_entity", "rest_of_line", "sgl_quoted_string", "srange", "string_end", "string_start", "token_map", "trace_parse_action", "ungroup", "unicode_set", "unicode_string", "with_attribute", "with_class", "__versionTime__", "anyCloseTag", "anyOpenTag", "cStyleComment", "commonHTMLEntity", "conditionAsParseAction", "countedArray", "cppStyleComment", "dblQuotedString", "dblSlashComment", "delimitedList", "dictOf", "htmlComment", "indentedBlock", "infixNotation", "javaStyleComment", "lineEnd", "lineStart", "locatedExpr", "makeHTMLTags", "makeXMLTags", "matchOnlyAtCol", "matchPreviousExpr", "matchPreviousLiteral", "nestedExpr", "nullDebugAction", "oneOf", "opAssoc", "originalTextFor", "pythonStyleComment", "quotedString", "removeQuotes", "replaceHTMLEntity", "replaceWith", "restOfLine", "sglQuotedString", "stringEnd", "stringStart", "tokenMap", "traceParseAction", "unicodeString", "withAttribute", "withClass", "common", "unicode", "testing"]
